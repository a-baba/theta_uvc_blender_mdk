#version 330 core

#define M_PI 3.14159265359 // (4.0*atan(1.0, 1.0))
float DFE_ALPHA_BLENDING_R_RATIO = 0.95;
float CAM_R = 283.0;
float CAM1_CPX = 319.0;
float CAM1_CPY = 319.0;
float CAM2_CPX = 959.0;
float CAM2_CPY = 319.0;
uniform float uni_width;
uniform float uni_height;
uniform vec3 uni_rot_vec;

uniform sampler2DRect image;
 
layout (location = 0) out vec4 fc;

mat3 create_rot_mat(float ang_x, float ang_y, float ang_z)
{
	mat3 rot_mat_x = mat3(
			1,           0,          0,
			0,  cos(ang_x), sin(ang_x),
			0, -sin(ang_x), cos(ang_x));
	mat3 rot_mat_y = mat3(
			 cos(ang_y), 0, -sin(ang_y),
			          0, 1,           0,
		     sin(ang_y), 0,  cos(ang_y));
	mat3 rot_mat_z = mat3(
			 cos(ang_z), sin(ang_z), 0,
			-sin(ang_z), cos(ang_z), 0,
			          0,          0, 1);
	mat3 rot;
	rot = rot_mat_y * rot_mat_x;
	rot = rot_mat_z * rot;
	return rot;
}

vec4 get_dfe_pixel(float ud, float vd, int which_cam, float dfe_r)
{
	vec4 pv;
	float dr;	// alpha blendingã´äEÇ©ÇÁÇÃîºåaï˚å¸ÇÃãóó£
	float rr;
	float k;	// alpha
	float t_ud, t_vd; // sub cameraÇÃéQè∆âÊëfà íu
	float phi;

	if( which_cam==0 ) { // main camera is 'cam1'
		dr = dfe_r - CAM_R * DFE_ALPHA_BLENDING_R_RATIO;
		if ( dr <= 0 ) { // no alpha blending
			pv = texture(image, vec2(ud, vd));
		}
		else {
			k = 1.0 - 0.5 * dr / (CAM_R * (1.0 - DFE_ALPHA_BLENDING_R_RATIO));	// 0.5 <= k <= 1(dr=0ÇÃÇ∆Ç´)ÅBã´äEÇ≈0.5
			rr = CAM_R + (CAM_R * (1.0 - DFE_ALPHA_BLENDING_R_RATIO) - dr);
			phi = M_PI - atan(vd - CAM1_CPY, ud - CAM1_CPX);
			t_ud = CAM2_CPX + rr*cos(phi);
			t_vd = CAM2_CPY + rr*sin(phi);
			vec4 p1 = texture(image, vec2(ud, vd));
			vec4 p2 = texture(image, vec2(t_ud, t_vd));
			pv = k*p1 + (1.0 - k)*p2;
		}
	} 
	else { // main camera is 'cam2'
		dr = dfe_r - CAM_R * DFE_ALPHA_BLENDING_R_RATIO;
		if ( dr <= 0 ) { // no alpha blending
			pv = texture(image, vec2(ud, vd));
		} 
		else {
			k = 1.0 - 0.5 * dr / (CAM_R * (1.0 - DFE_ALPHA_BLENDING_R_RATIO));
			rr = CAM_R + (CAM_R * (1.0 - DFE_ALPHA_BLENDING_R_RATIO) - dr);
			phi = M_PI - atan(vd - CAM2_CPY, ud - CAM2_CPX);
			t_ud = CAM1_CPX + rr*cos(phi);
			t_vd = CAM1_CPY + rr*sin(phi);
			vec4 p1 = texture(image, vec2(t_ud, t_vd));
			vec4 p2 = texture(image, vec2(ud, vd));
			pv = (1.0 - k)*p1 + k*p2;
		}
	}
	
	return pv;
}

void main(void)
{
	float height = uni_height;
	float width = uni_width;
	float x = gl_FragCoord.x;
	float y = gl_FragCoord.y;

    //equi_xy_to_lnglat
	float lat = -M_PI / 2.0 + y / height * M_PI;
	float lng = -M_PI + 2.0 * M_PI * x / width;

	//lnglat_to_sph
	vec3 sph_1 = vec3(cos(lat)*cos(lng), sin(lat), -cos(lat)*sin(lng));

	// sph_1 -> sph_2
	mat3 rot_base = create_rot_mat(M_PI/2, 0.0, -M_PI/2);
	mat3 rot_mat = create_rot_mat(uni_rot_vec[0], uni_rot_vec[1], uni_rot_vec[2]);
	vec3 sph_2 = rot_base * sph_1;
	sph_2 = rot_mat * sph_2;

	// 
	float theta;
	if( abs(sph_2.y) >= 1.0 ) // åvéZåÎç∑Ç≈thetaÇ™ïsíËÇ…Ç»ÇÈèÍçáÇ÷ÇÃëŒçÙ
		theta = 0;
	else
		theta = acos(abs(sph_2.y));

	if( sph_2[1] >= 0.0 ) {
		float phi = atan(-sph_2.x, -sph_2.z);
		float rr = abs(CAM_R * tan(theta / 2.0));	// óßëÃéÀâe
		float u = CAM1_CPX + rr*cos(phi);
		float v = CAM1_CPY + rr*sin(phi);
        //fc = texture(image, vec2(u, v));
		fc = get_dfe_pixel(u, v, 0, rr);
	} else {
		float phi = atan(-sph_2.x,  sph_2.z);
		float rr = abs(CAM_R * tan(theta / 2.0));	 // óßëÃéÀâe
		float u = CAM2_CPX + rr*cos(phi);
		float v = CAM2_CPY + rr*sin(phi);
	    //fc = texture(image, vec2(u, v));
		fc = get_dfe_pixel(u, v, 1, rr);
	}

	//fc = texture(image, vec2(u, v));
}
